plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.google.protobuf' version "0.8.17"
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.android.gms.strict-version-matcher-plugin'
    id 'com.google.firebase.crashlytics'
}

static buildConfigString(String string) {
    return "\"${string}\""
}

static createBaseURL(String host, Boolean secure) {
    def protocol = secure ? "https" : "http"
    return "${protocol}://${host}/"
}

android {
    namespace application.id
    compileSdkVersion buildOptions.compileSdkVersion
    buildToolsVersion buildOptions.buildToolsVersion

    defaultConfig {
        applicationId application.id
        minSdkVersion buildOptions.minSdkVersion
        targetSdkVersion buildOptions.targetSdkVersion
        versionCode application.versionCode
        versionName application.versionName

        def baseUrl = "api.publicapis.org"
        buildConfigField('String', buildConfig.defaultLanguage, buildConfigString("en"))
        buildConfigField('String', buildConfig.packageName, buildConfigString(applicationId))
        buildConfigField('String', buildConfig.baseUrl, buildConfigString(createBaseURL(baseUrl,true)))

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug{}

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility buildOptions.compileOptionsVersion
        targetCompatibility buildOptions.jvmVersion
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${plugin.protobuf}"
    }

    // Generates the java Protobuf-lite code for the Protobufs in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}


dependencies {
    implementation "androidx.activity:activity-ktx:${versions.activity}"
    implementation "androidx.appcompat:appcompat:${versions.appCompat}"
    implementation "androidx.collection:collection-ktx:${versions.collection}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"
    implementation "androidx.core:core-ktx:${versions.core}"
    implementation "androidx.datastore:datastore:${versions.datastore}"
    implementation "androidx.fragment:fragment-ktx:${versions.fragment}"
    implementation "androidx.hilt:hilt-navigation-fragment:${versions.navigationFragment}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-runtime-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
    implementation "androidx.paging:paging-runtime-ktx:${versions.paging}"
    implementation "androidx.room:room-ktx:${versions.room}"
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:${versions.swipeRefreshLayout}"
    implementation "com.faltenreich:skeletonlayout:${versions.skeletonLayout}"
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    implementation "com.google.protobuf:protobuf-javalite:${versions.protobuf}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.logging}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"

    kapt "androidx.room:room-compiler:${versions.room}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    //TEST DEPENDENCIES
    testImplementation "junit:junit:${testVersions.junit}"

    androidTestImplementation "androidx.test.espresso:espresso-core:${testVersions.espresso}"
    androidTestImplementation "androidx.test.ext:junit:${testVersions.testJUnit}"
}

// Allow references to generated code
kapt {
    correctErrorTypes true
}

apply from: "quick_start.gradle"

task QuickStartProject{
    def newPackageName = "com.rahul.kotlin.architecture"
    def rootProjectName = "Android Kotlin Architecture"
    quickSetup.execute(newPackageName,rootProjectName)
}